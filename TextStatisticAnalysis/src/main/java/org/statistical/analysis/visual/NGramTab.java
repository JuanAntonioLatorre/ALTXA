package org.statistical.analysis.visual;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.apache.commons.lang3.StringUtils;
import org.statistical.analysis.business.StatisticalAnalysis;
import org.statistical.analysis.pojo.NGramAnalysis;
import org.statistical.analysis.pojo.Settings;
import org.statistical.analysis.utils.IOUtils;
import org.statistical.analysis.utils.PropertiesUtils;
import org.statistical.analysis.utils.VisualUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Map;

public class NGramTab {
    private JPanel NGramTab;

    private JTextField textAField;
    private JTextField textBField;

    private JButton chooseFileAButton;
    private JButton chooseFileBButton;

    private JTextArea outputTextArea;
    private JButton executeButton;
    private JCheckBox outputCheckBox;

    public NGramTab() {
        chooseFileAButton.addActionListener(VisualUtils.fileChooserActionListener(textAField));
        chooseFileBButton.addActionListener(VisualUtils.fileChooserActionListener(textBField));
        executeButton.addActionListener(executeAnalysis());
    }

    private ActionListener executeAnalysis() {
        return e -> {
            if (StringUtils.isNotBlank(textAField.getText()) && StringUtils.isNotBlank(textBField.getText()))
                try {
                    outputTextArea.setText(null);
                    executeNGramAnalysis(textAField.getText(), textBField.getText(), outputTextArea);
                } catch (Throwable t) {
                    outputTextArea.append("\nERROR: an error occurred, could not complete analysis");
                    JOptionPane.showMessageDialog(new JFrame(), "AN ERROR OCCURRED: \n" + t.getMessage(),
                            "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            else
                JOptionPane.showMessageDialog(new JFrame(), "Select files before executing",
                        "WARNING", JOptionPane.WARNING_MESSAGE);
        };
    }

    private void executeNGramAnalysis(String textAPath, String textBPath, JTextArea outputTextArea) throws Exception {
        String rawTextA = IOUtils.readTextFile(new File(textAPath));
        String rawTextB = IOUtils.readTextFile(new File(textBPath));
        String textAName = new File(textAPath).getName();
        String textBName = new File(textBPath).getName();

        Settings settings = new Settings(PropertiesUtils.getSettingsFile());

        NGramAnalysis nGramAnalysis = StatisticalAnalysis.getNGramAnalysis(rawTextA, textAName, rawTextB, textBName, 2, outputTextArea, settings);

        Map<Integer, Integer> nGramCountA = StatisticalAnalysis.getNGramCount(rawTextA, settings);
        Map<Integer, Integer> nGramCountB = StatisticalAnalysis.getNGramCount(rawTextB, settings);

        if (outputCheckBox.isSelected()) {
            IOUtils.writeOutNGramAnalysisCsv(nGramAnalysis);
            IOUtils.writeOutNGramCount(textAName, nGramCountA, textBName, nGramCountB);
        }

        outputTextArea.append(IOUtils.outputNGramAnalysis(nGramAnalysis));

        outputTextArea.append(IOUtils.outputNGramCount(nGramCountA, textAName));
        outputTextArea.append(IOUtils.outputNGramCount(nGramCountB, textBName));

        outputTextArea.update(outputTextArea.getGraphics());
        outputTextArea.setCaretPosition(outputTextArea.getText().length() - 1);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        NGramTab = new JPanel();
        NGramTab.setLayout(new GridLayoutManager(4, 3, new Insets(5, 5, 5, 5), -1, -1));
        textAField = new JTextField();
        textAField.setBackground(new Color(-787713));
        textAField.setEditable(false);
        NGramTab.add(textAField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textBField = new JTextField();
        textBField.setBackground(new Color(-787713));
        textBField.setEditable(false);
        NGramTab.add(textBField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Text A file");
        NGramTab.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Text B file");
        NGramTab.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chooseFileAButton = new JButton();
        chooseFileAButton.setBackground(new Color(-10307442));
        chooseFileAButton.setText("Choose file");
        NGramTab.add(chooseFileAButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chooseFileBButton = new JButton();
        chooseFileBButton.setBackground(new Color(-10307442));
        chooseFileBButton.setText("Choose file");
        NGramTab.add(chooseFileBButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        NGramTab.add(scrollPane1, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        outputTextArea = new JTextArea();
        outputTextArea.setEditable(false);
        scrollPane1.setViewportView(outputTextArea);
        executeButton = new JButton();
        executeButton.setBackground(new Color(-11760710));
        executeButton.setText("Execute NGram analysis");
        NGramTab.add(executeButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outputCheckBox = new JCheckBox();
        outputCheckBox.setText("Output results to file");
        NGramTab.add(outputCheckBox, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label1.setLabelFor(textAField);
        label2.setLabelFor(textBField);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return NGramTab;
    }

}
